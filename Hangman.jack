class Hangman
{
   field String solution;
   field String correctGuesses;
   constructor Hangman new()
   {
      var String hangman,guesses;
      var int i;
      var int answerLength;
      let hangman = "Ahorcado";
      let guesses = "Intentos:";
      let i = 0;

      let solution = "COMPILAR";
      let correctGuesses = String.new(solution.length());
      while(i < (solution.length()))
      {
         let correctGuesses = correctGuesses.appendChar(219);
         let i = i+1;
      }
      return this;
   }

   //start and run the game.
   method void run()
   {
      var boolean endGame;
      var int line, wrongGuesses;
      var char guess;
      var char siguiente;
       
      let wrongGuesses = 0;
      let line = 3; 
      let endGame = 0;
      do drawHangPost();
      
      while(~(endGame))
      {
         do Output.printString(correctGuesses);
         do Output.moveCursor(line,15);
         let line = line +1;
         let guess = Keyboard.readChar();
         do Output.println();
         if(~(isCorrectGuess(guess)))
         {
            if(wrongGuesses = 0)
            {
               do drawHead();
            }
            if(wrongGuesses = 1)
            {
               do drawTorso();
            }
            if(wrongGuesses = 2)
            {
               do drawRightLeg();
            }
            if(wrongGuesses = 3)
            {
               do drawLeftLeg();
            }
            if(wrongGuesses = 4)
            {
               do drawRightArm();
            }
            if(wrongGuesses = 5)
            {
               do drawLeftArm();
               do Output.println();
               do Output.printString("GAME OVER!");
               
               let endGame = -1;
               let siguiente = Keyboard.readChar();
            }
            let wrongGuesses = wrongGuesses +1; 
         }
         if(isWin())
         {
            do Output.println();
            do Output.printString("You win!");
            let endGame = 1;
            let siguiente = Keyboard.readChar();
         }
      }
      return;
   }
   
   //Check winning condition
   method boolean isWin()
   {
      var int i;
      let i = 0;
      while(i < correctGuesses.length())
      {
         if(correctGuesses.charAt(i) = 219)
         {
            return 0; 
         }
         let i = i+1;
      }
      return -1; 
   }
   
   //Verify whole word as the game progresses
   method boolean isCorrectGuess(char guess)
   { 
      var int i;
      let i =0;
      while(i < solution.length())
      {
         if(guess = solution.charAt(i))
         {
            do correctGuesses.setCharAt(i, guess);
            return -1;
         }
         let i=i+1;
      }
      return 0;
   }
   
   //Default game setup for Hangman
   method void drawHangPost()
   { 
      do Screen.setColor(true);
      //Base Horca
      do Screen.drawLine(350, 200, 450, 200);
      //Tronco de la horca
      do Screen.drawLine(400,40,400,200);
      //Hombre-Horca -- Tronco
      do Screen.drawLine(305,40,400,40);
      //Hombre-Horca
      do Screen.drawLine(305,40,305,90);
      return;
   }
   
   //Main drawing functions
   method void drawHead()
   {
      do Screen.drawCircle(305,90,10);
      return;
   }
   method void drawTorso()
   {
      do Screen.drawLine(305,100, 305, 160);
      return;
   }
   method void drawRightArm()
   {
      do Screen.drawLine(305,135, 320, 120);
      return;
   }

   method void drawLeftArm()
   {
      do Screen.drawLine(305,135, 290, 120);
      return;
   }
   method void drawRightLeg()
   {
      do Screen.drawLine(305,160, 325, 180);
      return;
   }
   method void drawLeftLeg()
   {
      do Screen.drawLine(305,160, 285, 180);
      return;
   }
   //Deallocate Object in Memory.
   method void dispose()
   {
     do Memory.deAlloc(this);
     return;
   }
}